//https://leetcode.com/problems/insert-interval/
class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        if(intervals.size()==0)
            return vector<vector<int>> (1,newInterval);
        int insert_index=bi_find(intervals,newInterval);
        vector<int> merged(newInterval);
        list<vector<int>> result_;
        if(insert_index!=0){
            merged=intervals[insert_index-1];
            if(insert_index>=2)
                result_.insert(result_.begin(),
                               intervals.begin(),intervals.begin()+insert_index-1);
            if(merged[1]>=newInterval[0])
                merged[1]=max(merged[1],newInterval[1]);
            else{
                result_.push_back(merged);
                merged=newInterval;
            }
        }
        while(insert_index<intervals.size()){
            if(merged[1]>=intervals[insert_index][0]){
                merged[1]=max(merged[1],intervals[insert_index][1]);
                insert_index++;
            }
            else
                break;    
        }
        result_.push_back(merged);
        result_.insert(result_.end(),intervals.begin()+insert_index,intervals.end());
        return vector<vector<int>> (result_.begin(),result_.end());
    }
    int bi_find(vector<vector<int>>& intervals,vector<int>&newInterval){
        if(intervals.size()==1){
            if(intervals[0][0]>newInterval[0])
                return 0;
            else 
                return 1;
        }
        int l=0,r=intervals.size()-1;
        int pivot=(l+r)/2;
        while(1){
            if(intervals[pivot][0]<=newInterval[0]&&intervals[pivot+1][0]>=newInterval[0])
                return pivot+1;
            else if(intervals[pivot][0]>newInterval[0]){
                if(pivot-l<1)
                    return max(0,l-1);
                r=pivot;
                pivot=(pivot+l)/2;
            }
            else if(intervals[pivot+1][0]<newInterval[0]){
                if(r-pivot<=1)
                    return min(int(intervals.size()),r+1);
                l=pivot;
                pivot=(pivot+r)/2;
            }
        }
    }
};
